name: 'Backend Continuous Deployment'
on:
  workflow_dispatch:

  push:
    paths:
      - starter/backend/**
    branches:
      - main

env:
  ECR_REPO: backend

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install pipenv
        run: cd starter/backend && pip install pipenv
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.ouputs.python-version }}
      - name: Install dependencies
        run: cd starter/backend && pipenv install --dev
      - name: Run lint
        run: cd starter/backend && pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install pipenv
        run: cd starter/backend && pip install pipenv
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.ouputs.python-version }}
      - name: Install dependencies
        run: cd starter/backend && pipenv install --dev
      - name: Run lint
        run: cd starter/backend && pipenv run pytest

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install pipenv
        run: cd starter/backend && pip install pipenv
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.ouputs.python-version }}
      - name: Install dependencies
        run: cd starter/backend && pipenv install --dev
        # todo use docker to build application
      - name: Run test
        run: cd starter/backend && pipenv run pytest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{env.ECR_REPO}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./starter/backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy to kubernetes
        env: 
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{env.ECR_REPO}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -